{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.5.6.12127",
      "templateHash": "3973803974471500583"
    }
  },
  "parameters": {},
  "variables": {
    "azureCosmosLinkedServiceName": "AzureCosmosLinkedService",
    "azureStorageLinkedServiceName":"AzureStorageLinkedSerivce",
    "storageAccountName": "[toLower( concat('bookingdata', uniqueString(resourceGroup().id)))]",
    "cosmosAccountName": "[toLower( concat('smartbookinginc-', uniqueString(resourceGroup().id)))]",
    "cosmosDatabase":"bookingsdb",
    "containerAllTenants":"strategy_by_Tenants",
    "containerByBusinessLine": "strategy_by_BizLocation",
    "containerbyBusinessTenant":"strategy_by_BusinessTenant",
    "containerbySyntheticKey":"strategy_by_SyntheticKey",
    "dataFactoryName":"[toLower( concat('loadsmartbookingdata', uniqueString(resourceGroup().id)))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-06-01",
      "name": "[variables('storageAccountName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {}
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/default/{1}', variables('storageAccountName'), 'hoteldata')]",
      "properties":{
          "publicAccess": "Container"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/default/{1}', variables('storageAccountName'), 'rentdata')]",
      "properties":{
          "publicAccess": "Container"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2022-05-15",
      "name": "[variables('cosmosAccountName')]",
      "kind": "GlobalDocumentDB",
      "location": "[resourceGroup().location]",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session"
        },
        "locations": [
          {
            "locationName": "[resourceGroup().location]"
          }
        ]
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2022-05-15",
      "name": "[format('{0}/{1}', toLower(variables('cosmosAccountName')), 'bookingsdb')]",
      "properties": {
        "resource": {
          "id": "bookingsdb"
        },
        "options": {
          "throughput": 1000
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(variables('cosmosAccountName')))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2022-05-15",
      "name": "[format('{0}/{1}/{2}', toLower(variables('cosmosAccountName')), variables('cosmosDatabase'), variables('containerAllTenants'))]",
      "properties": {
        "resource": {
          "id": "[variables('containerAllTenants')]",
          "partitionKey": {
            "paths": [
              "/TenantId"
            ],
            "kind": "Hash"
          },
          "indexingPolicy": {
            "indexingMode": "consistent",
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/_etag/?"
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(variables('cosmosAccountName')), variables('cosmosDatabase'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2022-05-15",
      "name": "[format('{0}/{1}/{2}', toLower(variables('cosmosAccountName')), variables('cosmosDatabase'), variables('containerByBusinessLine'))]",
      "properties": {
        "resource": {
          "id": "[variables('containerByBusinessLine')]",
          "partitionKey": {
            "paths": [
              "/TenantId"
            ],
            "kind": "Hash"
          },
          "indexingPolicy": {
            "indexingMode": "consistent",
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/_etag/?"
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(variables('cosmosAccountName')), variables('cosmosDatabase'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2022-05-15",
      "name": "[format('{0}/{1}/{2}', toLower(variables('cosmosAccountName')), variables('cosmosDatabase'), variables('containerbyBusinessTenant'))]",
      "properties": {
        "resource": {
          "id": "[variables('containerbyBusinessTenant')]",
          "partitionKey": {
            "paths": [
              "/BizLocationId"
            ],
            "kind": "Hash"
          },
          "indexingPolicy": {
            "indexingMode": "consistent",
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/_etag/?"
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(variables('cosmosAccountName')), variables('cosmosDatabase'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2022-05-15",
      "name": "[format('{0}/{1}/{2}', toLower(variables('cosmosAccountName')), variables('cosmosDatabase'), variables('containerbySyntheticKey'))]",
      "properties": {
        "resource": {
          "id": "[variables('containerbySyntheticKey')]",
          "partitionKey": {
            "paths": [
              "/TenantId_TenantLocationId"
            ],
            "kind": "Hash"
          },
          "indexingPolicy": {
            "indexingMode": "consistent",
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/_etag/?"
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(variables('cosmosAccountName')), variables('cosmosDatabase'))]"
      ]
    },
    {
      "type": "Microsoft.DataFactory/factories",
      "apiVersion": "2018-06-01",
      "name": "[variables('dataFactoryName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosAccountName'))]"
        ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {},
      "resources": [
        {
            "type": "linkedservices",
            "name": "[variables('azureStorageLinkedServiceName')]",
            "dependsOn": [
              "[variables('dataFactoryName')]"
            ],
            "apiVersion": "2018-06-01",
            "properties": {
              "type": "AzureBlobFS",
              "description": "Azure Storage linked service",
              "typeProperties": {
                "url": "[concat('https://', variables('storageAccountName'), '.dfs.core.windows.net')]",
                "accountKey": {
                        "type": "SecureString",
                        "value": "[listKeys(variables('storageAccountName'), '2019-04-01').keys[0].value]"
                    }
              }
            }
        },
        {
          "type": "linkedservices",
          "name": "[variables('azureCosmosLinkedServiceName')]",
          "dependsOn": [
            "[variables('dataFactoryName')]"
          ],
          "apiVersion": "2018-06-01",
          "properties": {
            "type": "CosmosDb",
            "description": "Azure CosmosDB linked service",
            "typeProperties": {
                "connectionString": "[concat('AccountEndpoint=https://', variables('cosmosAccountName'), '.documents.azure.com:443/;Database=',variables('cosmosDatabase'),';AccountKey=', listKeys(variables('cosmosAccountName'), '2019-12-12').primaryMasterKey, ';')]"
            }
          }
        }
      ]
    },
    {
      "name": "[concat(variables('dataFactoryName'), '/DS_', variables('containerbySyntheticKey'))]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
          "linkedServiceName": {
              "referenceName": "[variables('azureCosmosLinkedServiceName')]",
              "type": "LinkedServiceReference"
          },
          "annotations": [],
          "type": "CosmosDbSqlApiCollection",
          "schema": {},
          "typeProperties": {
              "collectionName": "[variables('containerbySyntheticKey')]"
          }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
        "[resourceId('Microsoft.DataFactory/factories/linkedservices', variables('dataFactoryName'), variables('azureCosmosLinkedServiceName'))]"
      ]
    },
    {
      "name": "[concat(variables('dataFactoryName'), '/DS_', variables('containerbyBusinessTenant'))]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
          "linkedServiceName": {
              "referenceName": "[variables('azureCosmosLinkedServiceName')]",
              "type": "LinkedServiceReference"
          },
          "annotations": [],
          "type": "CosmosDbSqlApiCollection",
          "schema": {},
          "typeProperties": {
              "collectionName": "[variables('containerbyBusinessTenant')]"
          }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
        "[resourceId('Microsoft.DataFactory/factories/linkedservices', variables('dataFactoryName'), variables('azureCosmosLinkedServiceName'))]"
      ]
    },
    {
      "name": "[concat(variables('dataFactoryName'), '/DS_', variables('containerByBusinessLine'))]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
          "linkedServiceName": {
              "referenceName": "[variables('azureCosmosLinkedServiceName')]",
              "type": "LinkedServiceReference"
          },
          "annotations": [],
          "type": "CosmosDbSqlApiCollection",
          "schema": {},
          "typeProperties": {
              "collectionName": "[variables('containerByBusinessLine')]"
          }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
        "[resourceId('Microsoft.DataFactory/factories/linkedservices', variables('dataFactoryName'), variables('azureCosmosLinkedServiceName'))]"
      ]
    },
    {
      "name": "[concat(variables('dataFactoryName'), '/DS_', variables('containerAllTenants'))]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
          "linkedServiceName": {
              "referenceName": "[variables('azureCosmosLinkedServiceName')]",
              "type": "LinkedServiceReference"
          },
          "annotations": [],
          "type": "CosmosDbSqlApiCollection",
          "schema": {},
          "typeProperties": {
              "collectionName": "[variables('containerAllTenants')]"
          }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
        "[resourceId('Microsoft.DataFactory/factories/linkedservices', variables('dataFactoryName'), variables('azureStorageLinkedServiceName'))]"
      ]
    },
    {
      "name": "[concat(variables('dataFactoryName'), '/ADLS_HotelData')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
          "linkedServiceName": {
              "referenceName": "[variables('azureStorageLinkedServiceName')]",
              "type": "LinkedServiceReference"
          },
          "annotations": [],
          "type": "DelimitedText",
          "typeProperties": {
              "location": {
                "type": "AzureBlobFSLocation",
                "fileSystem": "hoteldata"
              },
              "columnDelimiter": ",",
              "escapeChar": "\\",
              "quoteChar": "\""
          },
          "schema": []
      },
      "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
        "[resourceId('Microsoft.DataFactory/factories/linkedservices', variables('dataFactoryName'), variables('azureStorageLinkedServiceName'))]"
      ]
    },
    {
      "name": "[concat(variables('dataFactoryName'), '/ADLS_RentData')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
          "linkedServiceName": {
              "referenceName": "[variables('azureStorageLinkedServiceName')]",
              "type": "LinkedServiceReference"
          },
          "annotations": [],
          "type": "DelimitedText",
          "typeProperties": {
              "location": {
                "type": "AzureBlobFSLocation",
                "fileSystem": "rentdata"
              },
              "columnDelimiter": ",",
              "escapeChar": "\\",
              "quoteChar": "\""
          },
          "schema": []
      },
      "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
        "[resourceId('Microsoft.DataFactory/factories/linkedservices', variables('dataFactoryName'), variables('azureStorageLinkedServiceName'))]"
      ]
    }
  ]
}
